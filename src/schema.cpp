#include "schema.h"

namespace SAPHRON
{
	//INSERT_DEF_HERE
	std::string SAPHRON::JsonSchema::ForceFields = "{\"additionalProperties\": false, \"properties\": {\"electrostatic\": {\"type\": \"array\"}, \"nonbonded\": {\"type\": \"array\"}, \"bonded\": {\"type\": \"array\"}}, \"type\": \"object\"}";
	std::string SAPHRON::JsonSchema::LebwholLasher = "{\"additionalProperties\": false, \"properties\": {\"epsilon\": {\"type\": \"number\"}, \"type\": {\"enum\": [\"LebwohlLasher\"], \"type\": \"string\"}, \"species\": {\"additionalItems\": false, \"minItems\": 2, \"type\": \"array\", \"maxItems\": 2, \"items\": {\"type\": \"string\"}}, \"gamma\": {\"type\": \"number\"}}, \"type\": \"object\", \"required\": [\"type\", \"epsilon\", \"gamma\", \"species\"]}";
	std::string SAPHRON::JsonSchema::LennardJones = "{\"additionalProperties\": false, \"properties\": {\"sigma\": {\"exclusiveMinimum\": true, \"type\": \"number\", \"minimum\": 0}, \"epsilon\": {\"type\": \"number\", \"minimum\": 0}, \"type\": {\"enum\": [\"LennardJones\"], \"type\": \"string\"}, \"species\": {\"additionalItems\": false, \"minItems\": 2, \"type\": \"array\", \"maxItems\": 2, \"items\": {\"type\": \"string\"}}}, \"type\": \"object\", \"required\": [\"type\", \"sigma\", \"epsilon\", \"rcut\", \"species\"]}";
	std::string SAPHRON::JsonSchema::Worlds = "{\"minItems\": 1, \"items\": {\"required\": [\"type\", \"dimensions\", \"r_cutoff\"], \"properties\": {\"seed\": {\"type\": \"integer\", \"minimum\": 0}, \"dimensions\": {\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\", \"minimum\": 0}}, \"type\": {\"enum\": [\"Simple\"], \"type\": \"string\"}, \"nlist_cutoff\": {\"exclusiveMinimum\": true, \"type\": \"number\", \"minimum\": 0}, \"r_cutoff\": {\"exclusiveMinimum\": true, \"type\": \"number\", \"minimum\": 0}}, \"type\": \"object\"}, \"type\": \"array\"}";
	std::string SAPHRON::JsonSchema::SimpleWorld = "{\"required\": [\"type\", \"dimensions\", \"r_cutoff\"], \"properties\": {\"seed\": {\"type\": \"integer\", \"minimum\": 0}, \"dimensions\": {\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\", \"minimum\": 0}}, \"type\": {\"enum\": [\"Simple\"], \"type\": \"string\"}, \"nlist_cutoff\": {\"exclusiveMinimum\": true, \"type\": \"number\", \"minimum\": 0}, \"r_cutoff\": {\"exclusiveMinimum\": true, \"type\": \"number\", \"minimum\": 0}}, \"type\": \"object\"}";
	std::string SAPHRON::JsonSchema::Particles = "{\"additionalItems\": false, \"minItems\": 1, \"items\": {\"additionalItems\": false, \"minItems\": 4, \"items\": [{\"type\": \"integer\", \"minimum\": 1}, {\"type\": \"string\"}, {\"type\": \"string\"}, {\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\", \"minimum\": 0}}, {\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\"}}, {\"type\": \"string\"}], \"type\": \"array\"}, \"type\": \"array\"}";
	std::string SAPHRON::JsonSchema::Site = "{\"additionalItems\": false, \"minItems\": 4, \"items\": [{\"type\": \"integer\", \"minimum\": 1}, {\"type\": \"string\"}, {\"type\": \"string\"}, {\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\", \"minimum\": 0}}, {\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\"}}, {\"type\": \"string\"}], \"type\": \"array\"}";
	std::string SAPHRON::JsonSchema::Components = "{\"patternProperties\": {\"^[A-z][A-z0-9]+$\": {\"required\": [\"count\"], \"properties\": {\"children\": {\"patternProperties\": {\"^[A-z][A-z0-9]+$\": {\"type\": \"object\"}}, \"type\": \"object\"}, \"count\": {\"type\": \"integer\", \"minimum\": 1}}, \"type\": \"object\", \"minProperties\": 1, \"additionalProperties\": false}}, \"minProperties\": 1, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::Selector = "{}";
	std::string SAPHRON::JsonSchema::Director = "{\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\"}}";
	std::string SAPHRON::JsonSchema::Observer = "{\"properties\": {\"frequency\": {\"type\": \"integer\", \"minimum\": 1}, \"flags\": {\"properties\": {\"world_density\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"sweeps\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"temperature\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"world_count\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"world_volume\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"acceptance\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"energy\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"world_composition\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"pressure\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}, \"identifier\": {\"maximum\": 1, \"type\": \"integer\", \"minimum\": 0}}, \"type\": \"object\"}}, \"oneOf\": [{\"properties\": {\"file_prefix\": {\"type\": \"string\"}}, \"required\": [\"file_prefix\"]}], \"type\": \"object\"}";
	std::string SAPHRON::JsonSchema::CSVObserver = "{\"properties\": {\"file_prefix\": {\"type\": \"string\"}}, \"required\": [\"file_prefix\"]}";
	std::string SAPHRON::JsonSchema::TranslateMove = "{\"required\": [\"type\", \"dx\"], \"properties\": {\"seed\": {\"type\": \"integer\", \"minimum\": 0}, \"dx\": {\"type\": \"number\", \"minimum\": 0}, \"type\": {\"enum\": [\"Translate\"], \"type\": \"string\"}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::DirectorRotateMove = "{\"required\": [\"type\"], \"properties\": {\"seed\": {\"type\": \"integer\", \"minimum\": 0}, \"type\": {\"enum\": [\"DirectorRotate\"], \"type\": \"string\"}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::SpeciesSwapMove = "{\"required\": [\"type\"], \"properties\": {\"type\": {\"enum\": [\"SpeciesSwap\"], \"type\": \"string\"}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::ParticleSwapMove = "{\"required\": [\"type\"], \"properties\": {\"seed\": {\"type\": \"integer\", \"minimum\": 0}, \"type\": {\"enum\": [\"ParticleSwap\"], \"type\": \"string\"}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::Moves = "{\"type\": \"array\"}";
	std::string SAPHRON::JsonSchema::RandomIdentityMove = "{\"required\": [\"type\"], \"properties\": {\"type\": {\"enum\": [\"IdentityChange\"], \"type\": \"string\"}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::FlipSpinMove = "{\"required\": [\"type\"], \"properties\": {\"type\": {\"enum\": [\"FlipSpin\"], \"type\": \"string\"}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::GibbsNVTEnsemble = "{\"required\": [\"type\", \"temperature\"], \"properties\": {\"temperature\": {\"exclusiveMinimum\": \"true\", \"type\": \"number\", \"minimum\": 0}, \"sweeps\": {\"type\": \"integer\", \"minimum\": 1}, \"type\": {\"enum\": [\"GibbsNVT\"], \"type\": \"string\"}, \"seed\": {\"type\": \"integer\", \"minimum\": 0}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::NVTEnsemble = "{\"required\": [\"type\", \"temperature\"], \"properties\": {\"temperature\": {\"exclusiveMinimum\": \"true\", \"type\": \"number\", \"minimum\": 0}, \"sweeps\": {\"type\": \"integer\", \"minimum\": 1}, \"type\": {\"enum\": [\"NVT\"], \"type\": \"string\"}, \"seed\": {\"type\": \"integer\", \"minimum\": 0}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::Ensembles = "{\"oneOf\": [{\"required\": [\"type\", \"temperature\"], \"properties\": {\"temperature\": {\"exclusiveMinimum\": \"true\", \"type\": \"number\", \"minimum\": 0}, \"sweeps\": {\"type\": \"integer\", \"minimum\": 1}, \"type\": {\"enum\": [\"NVT\"], \"type\": \"string\"}, \"seed\": {\"type\": \"integer\", \"minimum\": 0}}, \"type\": \"object\", \"additionalProperties\": false}, {\"required\": [\"type\", \"temperature\"], \"properties\": {\"temperature\": {\"exclusiveMinimum\": \"true\", \"type\": \"number\", \"minimum\": 0}, \"sweeps\": {\"type\": \"integer\", \"minimum\": 1}, \"type\": {\"enum\": [\"GibbsNVT\"], \"type\": \"string\"}, \"seed\": {\"type\": \"integer\", \"minimum\": 0}}, \"type\": \"object\", \"additionalProperties\": false}]}";
	std::string SAPHRON::JsonSchema::P2SAConnectivity = "{\"required\": [\"type\", \"coefficient\", \"director\", \"selector\"], \"properties\": {\"director\": {\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\"}}, \"coefficient\": {\"type\": \"number\"}, \"selector\": {}, \"type\": {\"enum\": [\"P2SA\"], \"type\": \"string\"}}, \"type\": \"object\", \"additionalProperties\": false}";
	std::string SAPHRON::JsonSchema::Connectivities = "{\"items\": {\"oneOf\": [{\"required\": [\"type\", \"coefficient\", \"director\", \"selector\"], \"properties\": {\"director\": {\"additionalItems\": false, \"minItems\": 3, \"type\": \"array\", \"maxItems\": 3, \"items\": {\"type\": \"number\"}}, \"coefficient\": {\"type\": \"number\"}, \"selector\": {}, \"type\": {\"enum\": [\"P2SA\"], \"type\": \"string\"}}, \"type\": \"object\", \"additionalProperties\": false}]}, \"type\": \"array\"}";
	
}